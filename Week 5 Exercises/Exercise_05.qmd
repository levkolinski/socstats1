---
title: "Exercise 05"
author: "Lev Kolinski"
format: html
editor: visual
---

```{r warning = FALSE}
library(tidyverse)
library(ggplot2)
```

## 5.2.1

Use `dbinom()` to verify the results in Equation 5.1.

```{r}
# x=1
dbinom(1, size = 1, prob = (2/3))
# x=0
dbinom(0, size = 1, prob = (2/3))

dbinom(1, size = 1, prob = (2/3))==(1-dbinom(0, size = 1, prob = (2/3)))

# if x=2, should return prob=0
dbinom(2, size = 1, prob = (2/3))
```

Use `pbinom()` to verify the results in Equation 5.2.

```{r}
# if x<0
pbinom(-.5, size=1, prob=(2/3))

# if x=0
pbinom(0, size=1, prob=(2/3))

# if x=1
pbinom(1, size=1, prob=(2/3))

# if x>1
pbinom(1.5, size=1, prob=(2/3))
```

Use `rbinom()` to generate 100 samples from the Bernouilli distribution with prob = 2/3. Plot the results in ggplot using geom_bar.

```{r}
sims <- rbinom(100, size = 1, prob = 2/3)

# Create a data frame
data <- data.frame(sims)

# Plot the results using ggplot2
ggplot(data, aes(x = factor(sims))) +
  geom_bar() +
  labs(title = "Bernoulli Distribution (p = 2/3)",
       x = "Outcome",
       y = "Frequency")
```

## 5.3.1

Draw the sample space Ω for this "experiment."

```{r}
outcomes <- c("H", "T")

# Generate all possible combinations for 4 coin flips
sample_space <- expand.grid(outcomes, outcomes, outcomes, outcomes)

# Rename the columns for clarity
colnames(sample_space) <- c("Flip1", "Flip2", "Flip3", "Flip4")

sample_space
```

## 5.3.2

How many possible ways are there to get X=0, X=1, X=2, X=3, and X=4?

```{r}
# Number ways to get X=0
16*dbinom(0,4,0.5)
# Number ways to get X=1
16*dbinom(1,4,0.5)
# Number ways to get X=2
16*dbinom(2,4,0.5)
# Number ways to get X=3
16*dbinom(3,4,0.5)
# Number ways to get X=4
16*dbinom(4,4,0.5)
```

What is the probability that X=2? **The probability is 37.5%**

Verify this by using the correct R function to calculate the probability that X=2?

```{r}
dbinom(2,4,0.5)
```

Use the correct R function to calculate the probability that X≤1?

```{r}
prob_0<-dbinom(0,1,4,0.5)
prob_1<-dbinom(1,4,0.5)

prob_0 + prob_1
```



# 5.3.3

Use `rbinom()` to generate 1000 samples from the Binomial distribution with size = 5 and prob = 2/3. Plot the results in ggplot using geom_bar.

```{r}
samples <- rbinom(1000, size = 5, prob = 2/3)

# Create a data frame
data <- data.frame(samples)

# Plot the results using ggplot2
ggplot(data, aes(x = factor(samples))) +
  geom_bar() +
  labs(title = "Bernoulli Distribution (p = 2/3)",
       x = "Outcome",
       y = "Frequency")
```

Estimate the probability that X is an even number using the mean() function on those 1000 values.

```{r}
prob_even <- mean(samples %% 2 == 0)
prob_even
```

# 5.3.5

Revisit what you did in Section 5.3.1 and 5.3.2.

What is the probability that X = 2 when p=1/3 and n=4? **Probability is 29.6%**

Verify this by using the correct R function to calculate the probability that X=2.

```{r}
dbinom(2,4,1/3)
```

# 5.3.7

Suppose that p = 2/3 and n = 15

Use `dbinom()` to verify the results in Equation 5.3

```{r}
probs<-dbinom(x=seq(0,15), size=15,prob=2/3)

for (i in seq(0,15)) {
  cat("P(X =", i, ") =", probs[i + 1], "\n")
}
```

Use `pbinom()` to verify the results in Equation 5.4

```{r}
cum_distribution_function<-pbinom(q=seq(0,15), size=15,prob=2/3)

for (i in seq(0,15)) {
  cat("P(X ≤",i,")=", cum_distribution_function[i+1],"\n")
}
```

# 5.4.1

Following Steve\'s code, calculate `clike_raw` and `clike_normalized`.

```{r}
grid <- tibble(prob = seq(0, 1, by = 0.001))
grid$like <- dbinom(21, 47, grid$prob) ## MAKE SURE YOU USE THESE VALUES

grid <- grid |> 
  mutate(clike_raw = cumsum(like),
         clike_normalized = clike_raw/sum(like))

ggplot(grid,
       aes(x = prob,
           y = like)) +
  geom_line()

ggplot(grid,
       aes(x = prob,
           y = clike_raw)) +
  geom_line()

ggplot(grid,
       aes(x = prob,
           y = clike_normalized)) +
  geom_line()
```

Looking at this data frame, what probability would you assign to `prob` having a value equal to or greater than 0.588?

```{r}
prob_greater_or_equal_0.588<-grid |> 
  filter(prob>=0.588)

sum(prob_greater_or_equal_0.588$like)
```

**I would assign prob=0.5329659.**
